import java.util.*

interface Continuation<T> {
    fun resumeWith(result: T): Any?
}

class PrintHi(private val continuation: Continuation<Any?>) : Continuation<Any?> {
    override fun resumeWith(result: Any?): Any? {
        println("hi")
        return delay(7000, continuation)
    }
}

class PrintSuspended(private val continuation: Continuation<Any?>) : Continuation<Any?> {
    override fun resumeWith(result: Any?): Any? {
        println("suspended")
        return continuation.resumeWith(null)
    }
}

class PrintBye(private val continuation: Continuation<Any?>) : Continuation<Any?> {
    override fun resumeWith(result: Any?): Any? {
        println("suspended")
        return continuation.resumeWith(null)
    }
}

fun delay(ms: Long, continuation: Continuation<Any?>) {  // Goes to Kotlin Event loop
    Timer().schedule(object : TimerTask() {
        override fun run() {
            continuation.resumeWith(continuation)
        }
    }, ms)
}

class SuspendedFunction(private val continuation: Continuation<Any?>) : Continuation<Any?> {
    var label = 0
    override fun resumeWith(result: Any?): Any? {
        return when (label) {
            0 -> {
                label = 1
                PrintHi(this).resumeWith(null)
                null
            }
            1 -> {
                label = 2
                PrintSuspended(this).resumeWith(null)
                null
            }
            2 -> {
                label = 3
                PrintBye(this).resumeWith(null)
                null
            }
            3 -> {
                label = -1
                continuation.resumeWith(null)
            }
            else -> Error("Too many invocation")
        }
    }

}

class EmptyContinuation: Continuation<Any?>{
    override fun resumeWith(result: Any?){
        println("We are done now")
    }
}

fun main() {
    SuspendedFunction(EmptyContinuation()).resumeWith(null)
    println("I'm not blocking!")
    println("==========================")

    Thread.sleep(4000)
}
